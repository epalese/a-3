#labels Phase-Requirements
= Discovery Service =

== Introduction ==
The intended use of a discovery service in A-3 framework is to enable services to search for the components needed to perform their tasks. So in A-3 a service is supposed to put all the information regarding its identity and provided functionalities in a service descriptor and then makes it available for search through the discovery service.
The main features of Discovery Service are its extreme configurability in the type of manageable information and in the search mechanisms. Moreover Discovery Service can be configured to address distributed settings ranging from centralized scenarios, in which a node is in charge of mantaining the service, to fully decentralized scenarios in which all nodes in the system take part in service operations.

<p>
https://a-3.googlecode.com/svn/wiki/images/DiscoveryServiceArch.png
<br/>
Figure 1
</p>

Classes and abstractions regarding Discovery Service span multiple projects (Figure 1 shows how the various components of Discovery Service are related and distributed between A-3 projects). This wiki will describe the top-level abstractions, giving only a brief look to inner details in order to explain and clarify some key concepts on which Discovery Service is based.

== Concepts ==
<p>
In order to facilitate the comprehension, it’s helpful to briefly introduce some key concepts that are at the foundations of Discovery Service mechanisms. 
First of all it’s important to say that Discovery Service is built on a publish/subscribe middleware: 
</p>

<p>
<i>The publish/subscribe interaction paradigm provides subscribers with the ability to express their interest in an event or a pattern of events, in order to be notified subsequently of any event, generated by a publisher, that matches their registered interest. In other terms, producers publish information on a software bus (an event manager) and consumers subscribe to the information they want to receive from that bus. This information is typically denoted by the term event and the act of delivering it by the term notification.</i>
</p>


=== Broker and Dispatching Service ===
<p>
Discovery Service inherits its components, namely the broker and the dispatching service, from REDS, the publish/subscribe middleware on which is built. In REDS the funcitonalities of the event manager are provided by a component called “broker”; the event manager could be constitued by a single broker or by a distributed broker network (dispatching network). The broker is in charge of matching interest and delivery messages to interested clients. Clients are the “dispaching services” and they constitute the interface to the publish/subscribe service, allowing to publish event and receive notifications and to subscribe to interest in specified events.
</p>
<p>
As we introduced before, Discovery Service allows to adopt different topologies for the overlay network of broker supporting the service. For instance Figure 2(a) shows a centralized scenario in which a well defined set of nodes is in charge of supporting the service; instead in Figure 2(b) the service is supported by all nodes of the system in a fully decentralized way.
</p>
<p>
https://a-3.googlecode.com/svn/wiki/images/DSOverlay1.png
https://a-3.googlecode.com/svn/wiki/images/DSOverlay2.png
<br/>
Figure 2
</p>


=== Messages ===
In REDS (and consequently in Discovery Service) an event takes the form of an object istance and is called “message”. Discovery Service defines the class DSMessage, that is the root class to be used for any information that has to be delivered in the service. Users can extend DSMessage with the attributes containing the information required by the specific needs. We can see an application of this concept in DiscoveryManager.

=== Publishing and Searching ===
<p>
So far we have seen the internals of REDS-based Discovery Service, but how are implemented the actual mechanisms of publishing and searching? In Discovery Service the act of publish something becomes, in publish/subscribe terms, a subscription to particular “search messages”. Searching then is implemented through the definition and publication of the search messages just indicated. Discovery Service requires two different kind of matching filter:
 * publish filter: used in the publication of information; this filter is defined by the publisher and is used by the broker to select the correct search messages (that is if the message is an istance of the class defined to be the search message for the published information); usually this filter should contain the information to be published in order to allow the broker to perform matching operation on the published content when a correct search message arrives;
 * search filter: this filter is wrapped in a search message and contains the matching criteria used to find the desired information.
</p>
<p>
In front of a search message the broker opearations can be splitted in two “matching phases”:
 # when a search message arrives, the borker invokes the method matches of the publishing filter passing the message as argument; the publishing filter can now determine if the type of search messages is addressed to the published information;
 # if the previous matching has a positive result, the publishing filter takes the filter contained in the search messages and invoke on it the method matches, passing the published information (remember that the information should be contained in the publishing filter) as argument.
 
If the second step also has a positive result the message is then passed to the client. Hereafter the control on the search message is totally in the hands of the client. Discovery Service delegate the management of arrived search message to application level but, in order to implement a correct search mechanism, the client is supposed to reply to the searcher with the required information. For this purpose an extension to publish/subscribe paradigm provided by REDS comes in aid allowing a client to send replies to messages it receives.
</p>

== Configuration ==
<p>
In order to use Discovery Service it must be configured with the proper network parameters. As we will see later these parameters are managed through the class <code>discoveryService.core.DSConfiguration</code> which allows to set the parameters directly in the Java code or through a configuration file. The possible parameters are:

</p>

